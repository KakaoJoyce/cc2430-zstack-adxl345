cscope 15 $HOME/workspace/cc2430/project/cc2430-zstack-adxl345/Source               0000015346
	@AXD.c

63 
	~"OSAL.h
"

64 
	~"AF.h
"

65 
	~"ZDAµ.h
"

66 
	~"ZDObje˘.h
"

67 
	~"ZDProfûe.h
"

68 
	~"≠s_groups.h
"

70 
	~"AXD.h
"

71 
	~"DebugTø˚.h
"

73 #i‡!
deföed
–
WIN32
 )

74 
	~"OnBﬂrd.h
"

78 
	~"hÆ_lcd.h
"

79 
	~"hÆ_Àd.h
"

80 
	~"hÆ_key.h
"

81 
	~"hÆ_u¨t.h
"

82 
	~"hÆ_adc.h
"

85 
	~"adxl345.h
"

86 
	~"ªadaxd.h
"

91 
	#FREE_OTABUF
(Ë{ \

	)

92 i‡–
	gŸaBuf
 ) \

94 
oßl_mem_‰ì
–
ŸaBuf
 ); \

96 i‡–
	gŸaBuf2
 ) \

98 
SîülAµ_SídD©a
–
ŸaBuf2
, 
ŸaLí2
 ); \

99 
	gŸaBuf2
 = 
NULL
; \

103 
	gŸaBuf
 = 
NULL
; \

107 
	#HAL_ADC_REF_125V
 0x00

	)

108 
	#HAL_ADC_REF_AIN7
 0x40

	)

109 
	#HAL_ADC_DEC_064
 0x00

	)

110 
	#HAL_ADC_DEC_128
 0x10

	)

111 
	#HAL_ADC_DEC_512
 0x30

	)

112 
	#HAL_ADC_CHN_VDD3
 0x0‡

	)

113 
	#HAL_ADC_CHN_AIN1
 0x01

	)

114 
	#HAL_ADC_CHN_AIN2
 0x02

	)

115 
	#HAL_ADC_CHN_AIN4
 0x04

	)

116 
	#HAL_ADC_CHN_AIN5
 0x05

	)

117 
	#HAL_ADC_CHN_TEMP
 0x0ê

	)

118 
	#ADC_TEMP
 0x00

	)

119 
	#ADC_PULSE
 0x01

	)

121 
	#DEVICE_A
 0x01;

	)

122 
	#DEVICE_B
 0x02;

	)

123 
	#DEVICE_C
 0x03;

	)

127 
	#ZB_USER_EVENTS
 0x00FF

	)

128 #i‡!
deföed
–
SERIAL_APP_PORT
 )

129 
	#SERIAL_APP_PORT
 0

	)

132 #i‡!
deföed
–
SERIAL_APP_BAUD
 )

135 
	#SERIAL_APP_BAUD
 
HAL_UART_BR_115200


	)

139 #i‡!
deföed
–
SERIAL_APP_THRESH
 )

140 
	#SERIAL_APP_THRESH
 48

	)

143 #i‡!
deföed
–
SERIAL_APP_RX_MAX
 )

144 #i‡(
deföed
–
HAL_UART_DMA
 )) && HAL_UART_DMA

145 
	#SERIAL_APP_RX_MAX
 128

	)

151 
	#SERIAL_APP_RX_MAX
 64

	)

155 #i‡!
deföed
–
SERIAL_APP_TX_MAX
 )

156 #i‡(
deföed
–
HAL_UART_DMA
 )) && HAL_UART_DMA

157 
	#SERIAL_APP_TX_MAX
 128

	)

159 
	#SERIAL_APP_TX_MAX
 64

	)

164 #i‡!
deföed
–
SERIAL_APP_IDLE
 )

165 
	#SERIAL_APP_IDLE
 6

	)

169 #i‡!
deföed
–
SERIAL_APP_RX_CNT
 )

170 #i‡(
deföed
–
HAL_UART_DMA
 )) && HAL_UART_DMA

171 
	#SERIAL_APP_RX_CNT
 80

	)

173 
	#SERIAL_APP_RX_CNT
 6

	)

178 #i‡!
deföed
–
SERIAL_APP_LOOPBACK
 )

179 
	#SERIAL_APP_LOOPBACK
 
TRUE


	)

182 #i‡
SERIAL_APP_LOOPBACK


183 
	#SERIALAPP_TX_RTRY_EVT
 0x0010

	)

184 
	#SERIALAPP_TX_RTRY_TIMEOUT
 250

	)

187 
	#SERIAL_APP_RSP_CNT
 4

	)

196 
≠s_Group_t
 
	gAXD_Group
;

199 c⁄° 
cId_t
 
	gAXD_Clu°îLi°
[
AXD_MAX_CLUSTERS
] =

201 
AXD_CLUSTERID
,

202 
AXD_TEST_CLUSTERID


205 c⁄° 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gAXD_Sim∂eDesc
 =

207 
AXD_ENDPOINT
,

208 
AXD_PROFID
,

209 
AXD_DEVICEID
,

210 
AXD_DEVICE_VERSION
,

211 
AXD_FLAGS
,

212 
AXD_MAX_CLUSTERS
,

213 (
cId_t
 *)
AXD_Clu°îLi°
,

214 
AXD_MAX_CLUSTERS
,

215 (
cId_t
 *)
AXD_Clu°îLi°


222 
ídPoötDesc_t
 
	gAXD_ïDesc
;

227 
INT8U
 
	gpul£_Êag
, 
	gtimî_Êag
, 
	gpul£_˙t
;

236 
byã
 
	gAXD_TaskID
;

239 
devSèãs_t
 
	gAXD_NwkSèã
;

242 
byã
 
	gAXD_TønsID
;

245 
afAddrTy≥_t
 
	gAXD_D°Addr
;

246 #i‡
SERIAL_APP_LOOPBACK


247 
uöt8
 
	grxLí
;

248 
uöt8
 
	grxBuf
[
SERIAL_APP_RX_CNT
];

254 
AXD_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
öMsg
 );

255 
AXD_H™dÀKeys
–
byã
 
shi·
, byã 
keys
 );

256 
AXD_MesßgeMSGCB
–
afIncomögMSGPackë_t
 *
pckt
 );

257 
AXD_SídTheMesßge
( );

259 #i‡
SERIAL_APP_LOOPBACK


260 
rxCB_Lo›back
–
uöt8
 
p‹t
, uöt8 
evít
 );

262 
rxCB
–
uöt8
 
p‹t
, uöt8 
evít
 );

287 
	$AXD_Inô
–
byã
 
èsk_id
 )

289 
hÆUARTCfg_t
 
u¨tC⁄fig
;

290 
AXD_TaskID
 = 
èsk_id
;

291 
AXD_NwkSèã
 = 
DEV_INIT
;

292 
AXD_TønsID
 = 0;

299 
AXD_D°Addr
.
addrMode
 = (
afAddrMode_t
)
AddrNŸPª£¡
;

300 
AXD_D°Addr
.
ídPoöt
 = 0;

301 
AXD_D°Addr
.
addr
.
sh‹tAddr
 = 0;

304 
AXD_ïDesc
.
ídPoöt
 = 
AXD_ENDPOINT
;

305 
AXD_ïDesc
.
èsk_id
 = &
AXD_TaskID
;

306 
AXD_ïDesc
.
sim∂eDesc


307 (
Sim∂eDes¸ùti⁄F‹m©_t
 *)&
AXD_Sim∂eDesc
;

308 
AXD_ïDesc
.
œãncyReq
 = 
noL©ícyReqs
;

311 
	`afRegi°î
–&
AXD_ïDesc
 );

314 
	`Regi°îF‹Keys
–
AXD_TaskID
 );

315 
u¨tC⁄fig
.
c⁄figuªd
 = 
TRUE
;

316 
u¨tC⁄fig
.
baudR©e
 = 
SERIAL_APP_BAUD
;

317 
u¨tC⁄fig
.
ÊowC⁄åﬁ
 = 
FALSE
;

318 
u¨tC⁄fig
.
ÊowC⁄åﬁThªshﬁd
 = 
SERIAL_APP_THRESH
;

319 
u¨tC⁄fig
.
rx
.
maxBufSize
 = 
SERIAL_APP_RX_MAX
;

320 
u¨tC⁄fig
.
tx
.
maxBufSize
 = 
SERIAL_APP_TX_MAX
;

321 
u¨tC⁄fig
.
idÀTimeout
 = 
SERIAL_APP_IDLE
;

322 
u¨tC⁄fig
.
ötE«bÀ
 = 
TRUE
;

323 #i‡
SERIAL_APP_LOOPBACK


324 
u¨tC⁄fig
.
ˇŒBackFunc
 = 
rxCB_Lo›back
;

326 
u¨tC⁄fig
.
ˇŒBackFunc
 = 
rxCB
;

328 
	`HÆUARTO≥n
 (
SERIAL_APP_PORT
, &
u¨tC⁄fig
);

331 #i‡
	`deföed
 ( 
LCD_SUPPORTED
 )

332 
	`HÆLcdWrôeSåög
–"AXD", 
HAL_LCD_LINE_1
 );

335 
	`ZDO_Regi°îF‹ZDOMsg
–
AXD_TaskID
, 
End_Devi˚_Böd_r•
 );

336 
	`ZDO_Regi°îF‹ZDOMsg
–
AXD_TaskID
, 
M©ch_Desc_r•
 );

338 
AXD_Group
.
ID
 = 
AXD_GROUP
;

339 
	`≠s_AddGroup
(
AXD_ENDPOINT
,&
AXD_Group
);

341 #ifde‡
AXD_END


342 
	`Inô_ADXL345
();

343 
	`HÆAdcInô
();

345 
	}
}

360 
UINT16
 
	$AXD_Pro˚ssEvít
–
byã
 
èsk_id
, 
UINT16
 
evíts
 )

363 
afIncomögMSGPackë_t
 *
MSGpkt
;

365 
afD©aC⁄fúm_t
 *
afD©aC⁄fúm
;

368 
byã
 
£¡EP
;

369 
ZSètus_t
 
£¡Sètus
;

370 
byã
 
£¡TønsID
;

371 #ifde‡
AXD_END


372 
BUFFER
[0] = 0;

373 #ifde‡
AXD_END_A


374 
BUFFER
[1] = 
DEVICE_A
;

376 #ifde‡
AXD_END_B


377 
BUFFER
[1] = 
DEVICE_B
;

379 #ifde‡
AXD_END_C


380 
BUFFER
[1] = 
DEVICE_C
;

384 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

386 
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
AXD_TaskID
 );

387  
MSGpkt
 )

389  
MSGpkt
->
hdr
.
evít
 )

391 
ZDO_CB_MSG
:

392 
	`AXD_Pro˚ssZDOMsgs
–(
zdoIncomögMsg_t
 *)
MSGpkt
 );

395 
KEY_CHANGE
:

396 
	`AXD_H™dÀKeys
–((
keyCh™ge_t
 *)
MSGpkt
)->
°©e
, ((keyCh™ge_à*)MSGpkt)->
keys
 );

399 
AF_DATA_CONFIRM_CMD
:

403 
afD©aC⁄fúm
 = (
afD©aC⁄fúm_t
 *)
MSGpkt
;

404 
£¡EP
 = 
afD©aC⁄fúm
->
ídpoöt
;

405 
£¡Sètus
 = 
afD©aC⁄fúm
->
hdr
.
°©us
;

406 
£¡TønsID
 = 
afD©aC⁄fúm
->
å™sID
;

407 ()
£¡EP
;

408 ()
£¡TønsID
;

411 i‡–
£¡Sètus
 !
ZSuc˚ss
 )

417 
AF_INCOMING_MSG_CMD
:

419 #ifde‡
AXD_COR


422 
	`AXD_MesßgeMSGCB
–
MSGpkt
 );

426 
ZDO_STATE_CHANGE
:

427 
AXD_NwkSèã
 = (
devSèãs_t
)(
MSGpkt
->
hdr
.
°©us
);

428 i‡–(
AXD_NwkSèã
 =
DEV_ZB_COORD
)

429 || (
AXD_NwkSèã
 =
DEV_ROUTER
)

430 || (
AXD_NwkSèã
 =
DEV_END_DEVICE
) )

433 
	`oßl_°¨t_timîEx
–
AXD_TaskID
,

434 
AXD_SEND_MSG_EVT
,

435 
AXD_SEND_MSG_TIMEOUT
 );

444 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
MSGpkt
 );

447 
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
AXD_TaskID
 );

451  (
evíts
 ^ 
SYS_EVENT_MSG
);

456 i‡–
evíts
 & 
AXD_SEND_MSG_EVT
 )

459 
	`AXD_SídTheMesßge
();

461 
	`oßl_°¨t_timîEx
–
AXD_TaskID
,

462 
AXD_SEND_MSG_EVT
,

463 (
AXD_SEND_MSG_TIMEOUT
/100) );

466  (
evíts
 ^ 
AXD_SEND_MSG_EVT
);

468 i‡–
evíts
 & 
AXD_PULSE_MSG_EVT
 )

471 
timî_Êag
 ++;

473 
	`oßl_°¨t_timîEx
–
AXD_TaskID
,

474 
AXD_PULSE_MSG_EVT
,

475 (
AXD_SEND_MSG_TIMEOUT
/5) );

478  (
evíts
 ^ 
AXD_PULSE_MSG_EVT
);

480 i‡–
evíts
 & ( 
ZB_USER_EVENTS
 ) )

483 
	`zb_H™dÀOßlEvít
–
evíts
 );

490 
	}
}

504 
	$AXD_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
öMsg
 )

506  
öMsg
->
˛u°îID
 )

508 
End_Devi˚_Böd_r•
:

509 i‡–
	`ZDO_P¨£BödR•
–
öMsg
 ) =
ZSuc˚ss
 )

512 
	`HÆLedSë
–
HAL_LED_4
, 
HAL_LED_MODE_ON
 );

514 #i‡
	`deföed
(
BLINK_LEDS
)

518 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_FLASH
 );

523 
M©ch_Desc_r•
:

525 
ZDO_A˘iveEndpoötR•_t
 *
pR•
 = 
	`ZDO_P¨£EPLi°R•
–
öMsg
 );

526 i‡–
pR•
 )

528 i‡–
pR•
->
°©us
 =
ZSuc˚ss
 &&ÖR•->
˙t
 )

530 
AXD_D°Addr
.
addrMode
 = (
afAddrMode_t
)
Addr16Bô
;

531 
AXD_D°Addr
.
addr
.
sh‹tAddr
 = 
pR•
->
nwkAddr
;

533 
AXD_D°Addr
.
ídPoöt
 = 
pR•
->
ïLi°
[0];

536 
	`HÆLedSë
–
HAL_LED_4
, 
HAL_LED_MODE_ON
 );

538 
	`oßl_mem_‰ì
–
pR•
 );

543 
	}
}

559 
	$AXD_H™dÀKeys
–
byã
 
shi·
, byã 
keys
 )

561 
zAddrTy≥_t
 
d°Addr
;

564 i‡–
shi·
 )

566 i‡–
keys
 & 
HAL_KEY_SW_1
 )

569 i‡–
keys
 & 
HAL_KEY_SW_2
 )

572 i‡–
keys
 & 
HAL_KEY_SW_3
 )

575 i‡–
keys
 & 
HAL_KEY_SW_4
 )

581 i‡–
keys
 & 
HAL_KEY_SW_1
 )

585 i‡–
keys
 & 
HAL_KEY_SW_2
 )

587 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

590 
d°Addr
.
addrMode
 = 
Addr16Bô
;

591 
d°Addr
.
addr
.
sh‹tAddr
 = 0x0000;

592 
	`ZDP_EndDevi˚BödReq
–&
d°Addr
, 
	`NLME_GëSh‹tAddr
(),

593 
AXD_ïDesc
.
ídPoöt
,

594 
AXD_PROFID
,

595 
AXD_MAX_CLUSTERS
, (
cId_t
 *)
AXD_Clu°îLi°
,

596 
AXD_MAX_CLUSTERS
, (
cId_t
 *)
AXD_Clu°îLi°
,

597 
FALSE
 );

600 i‡–
keys
 & 
HAL_KEY_SW_3
 )

604 i‡–
keys
 & 
HAL_KEY_SW_4
 )

606 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

609 #ifde‡
AXD_COR


610 
d°Addr
.
addrMode
 = 
AddrBrﬂdˇ°
;

611 
d°Addr
.
addr
.
sh‹tAddr
 = 
NWK_BROADCAST_SHORTADDR
;

612 
	`ZDP_M©chDescReq
–&
d°Addr
, 
NWK_BROADCAST_SHORTADDR
,

613 
AXD_PROFID
,

614 
AXD_MAX_CLUSTERS
, (
cId_t
 *)
AXD_Clu°îLi°
,

615 
AXD_MAX_CLUSTERS
, (
cId_t
 *)
AXD_Clu°îLi°
,

616 
FALSE
 );

618 
d°Addr
.
addrMode
 = 
Addr16Bô
;

619 
d°Addr
.
addr
.
sh‹tAddr
 = 0x0000;

620 
	`ZDP_M©chDescReq
–&
d°Addr
, 
NWK_BROADCAST_SHORTADDR
,

621 
AXD_PROFID
,

622 
AXD_MAX_CLUSTERS
, (
cId_t
 *)
AXD_Clu°îLi°
,

623 
AXD_MAX_CLUSTERS
, (
cId_t
 *)
AXD_Clu°îLi°
,

624 
FALSE
 );

628 
	}
}

645 
	$AXD_MesßgeMSGCB
–
afIncomögMSGPackë_t
 *
pkt
 )

648  
pkt
->
˛u°îId
 )

650 
AXD_CMD_ID
:

653 
	`HÆUARTWrôe
–
SERIAL_APP_PORT
, 
pkt
->
cmd
.
D©a
,pkt->cmd.
D©aLígth
);

655 
AXD_TEST_CMD_ID
:

656 
	`HÆLcdWrôeSåögVÆue
("R: ",*(
pkt
->
cmd
.
D©a
),10,4);

658 
AXD_TEST2_CMD_ID
:

659 
	`HÆLcdWrôeSåögVÆue
("Q: ",*(
pkt
->
cmd
.
D©a
),10,3);

664 
	}
}

675 
	$AXD_SídTheMesßge
( )

678 #ifde‡
AXD_END


680 
	`Mu…ùÀ_Ród_ADXL345
();

681 
	`c⁄vîsi⁄
();

682 
	`RódAdcVÆue
(
ADC_TEMP
);

683 
	`RódAdcVÆue
(
ADC_PULSE
);

685 i‡–
	`AF_D©aReque°
–&
AXD_D°Addr
, &
AXD_ïDesc
,

686 
AXD_CMD_ID
,

687 (
byã
)((
BUFFER
)),

688 (
byã
 *)(
BUFFER
),

689 &
AXD_TønsID
,

690 
AF_DISCV_ROUTE
, 
AF_DEFAULT_RADIUS
 ) =
afSètus_SUCCESS
 )

692 
	`≠s_RemoveGroup
(
AXD_ENDPOINT
,
AXD_GROUP
);

701 #ifde‡
AXD_ROUTER


702 i‡–
	`AF_D©aReque°
–&
AXD_D°Addr
, &
AXD_ïDesc
,

703 
AXD_TEST_CMD_ID
,

704 (
byã
)((
ã°2
)),

705 (
byã
 *)(&
ã°2
),

706 &
AXD_TønsID
,

707 
AF_SKIP_ROUTING
, 
AF_DEFAULT_RADIUS
 ) =
afSètus_SUCCESS
 )

718 
	}
}

722 
	$AXD_Re˚iveD©aIndiˇti⁄
–
uöt16
 
sour˚
, uöt16 
comm™d
, uöt16 
Àn
, 
uöt8
 *
pD©a
 )

724 #i‡
	`deföed
 ( 
MT_SAPI_CB_FUNC
 )

727 i‡–
	`SAPICB_CHECK
–
SPI_CB_SAPI_RCV_DATA_IND
 ) )

729 
	`zb_MTCÆlbackRe˚iveD©aIndiˇti⁄
–
sour˚
, 
comm™d
, 
Àn
, 
pD©a
 );

734 
	`zb_Re˚iveD©aIndiˇti⁄
–
sour˚
, 
comm™d
, 
Àn
, 
pD©a
 );

736 
	}
}

738 #i‡
SERIAL_APP_LOOPBACK


752 
	$rxCB_Lo›back
–
uöt8
 
p‹t
, uöt8 
evít
 )

755 i‡–
rxLí
 )

757 i‡–!
	`HÆUARTWrôe
–
SERIAL_APP_PORT
, 
rxBuf
, 
rxLí
 ) )

759 
	`oßl_°¨t_timîEx
–
AXD_TaskID
, 
SERIALAPP_TX_RTRY_EVT
,

760 
SERIALAPP_TX_RTRY_TIMEOUT
 );

765 
	`oßl_°›_timîEx
–
AXD_TaskID
, 
SERIALAPP_TX_RTRY_EVT
 );

770 i‡–!(
rxLí
 = 
	`HÆUARTRód
–
p‹t
, 
rxBuf
, 
SERIAL_APP_RX_CNT
 )) )

775 i‡–
	`HÆUARTWrôe
–
SERIAL_APP_PORT
, 
rxBuf
, 
rxLí
 ) )

777 
rxLí
 = 0;

781 
	`oßl_°¨t_timîEx
–
AXD_TaskID
, 
SERIALAPP_TX_RTRY_EVT
,

782 
SERIALAPP_TX_RTRY_TIMEOUT
 );

784 
	}
}

801 
	$rxCB
–
uöt8
 
p‹t
, uöt8 
evít
 )

803 
uöt8
 *
buf
, 
Àn
;

812 i‡–
ŸaBuf2
 )

817 i‡–!(
buf
 = 
	`oßl_mem_Æloc
–
SERIAL_APP_RX_CNT
 )) )

825 
Àn
 = 
	`HÆUARTRód
–
p‹t
, 
buf
+1, 
SERIAL_APP_RX_CNT
-1 );

827 i‡–!
Àn
 )

829 
	`oßl_mem_‰ì
–
buf
 );

838 i‡–
ŸaBuf
 )

840 
ŸaBuf2
 = 
buf
;

841 
ŸaLí2
 = 
Àn
;

845 
ŸaBuf
 = 
buf
;

846 
ŸaLí
 = 
Àn
;

850 
	`oßl_£t_evít
–
SîülAµ_TaskID
, 
SERIALAPP_MSG_SEND_EVT
 );

852 
	}
}

857 
uöt8
 
	$myAµ_RódTem≥øtuª
( )

860 
uöt16
 
vÆue
;

863 
ADCIF
 = 0;

865 
ADCCON3
 = (
HAL_ADC_REF_125V
 | 
HAL_ADC_DEC_512
 | 
HAL_ADC_CHN_TEMP
);

868  !
ADCIF
 );

871 
vÆue
 = 
ADCL
;

872 
vÆue
 |((
uöt16
Ë
ADCH
) << 8;

882 
	#VOLTAGE_AT_TEMP_ZERO
 19477

883 
	#TEMP_COEFFICIENT
 62.9

884 

	)

886 i‡–
vÆue
 < 
VOLTAGE_AT_TEMP_ZERO
 )

887 
vÆue
 = 
VOLTAGE_AT_TEMP_ZERO
;

889 
vÆue
 = vÆuê- 
VOLTAGE_AT_TEMP_ZERO
;

892 i‡–
vÆue
 > 
TEMP_COEFFICIENT
 * 99 )

893 
vÆue
 = 
TEMP_COEFFICIENT
 * 99;

895  ( (
uöt8
)(
vÆue
/
TEMP_COEFFICIENT
) );

896 
	}
}

897 
	$RódAdcVÆue
–
uöt8
 
Êag
 )

899 
uöt16
 
vÆue
;

900 
ADCIF
 = 0;

901 i‡(
Êag
 =
ADC_TEMP
)

903 
ADCCON3
 = (
HAL_ADC_REF_AIN7
 | 
HAL_ADC_DEC_512
 | 
HAL_ADC_CHN_AIN4
);

908 
ADCCON3
 = (
HAL_ADC_REF_AIN7
 | 
HAL_ADC_DEC_512
 | 
HAL_ADC_CHN_AIN5
);

910  !
ADCIF
 );

911 
vÆue
 = 
ADCL
 ;

912 
vÆue
 |((
uöt16
Ë
ADCH
) << 8;

913 
vÆue
 = value >> 2;

914 i‡(
Êag
 =
ADC_TEMP
)

916 
vÆue
 = (
INT16U
)(330.0 * ()value / 8192.0);

917 
BUFFER
[2] = (
INT8U
)(
vÆue
 % 100 % 10 + '0');

918 
BUFFER
[3] = (
INT8U
)(
vÆue
 % 100 / 10 + '0');

919 
BUFFER
[4] = (
INT8U
)(
vÆue
 / 100 + '0');

922 i‡(
vÆue
 < 2730){

923 
pul£_Êag
 = 1;

925 i‡(
pul£_Êag
 == 1){

926 i‡(
vÆ
 >= 2730){

927 
pul£_˙t
 ++;

928 
pul£_Êag
 = 0;

931 
BUFFER
[5] = (
INT8U
)(
vÆue
 % 100 / 10 + '0');

932 
BUFFER
[6] = (
INT8U
)(
vÆue
 / 100 + '0');

933 
BUFFER
[7] =

935 
	}
}

	@AXD.h

40 #i‚de‡
AXD_H


41 
	#AXD_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"ZComDef.h
"

59 
	#AXD_ENDPOINT
 10

	)

60 
	#AXD_GROUP
 1

	)

62 
	#AXD_PROFID
 0x0F04

	)

63 
	#AXD_DEVICEID
 0x0001

	)

64 
	#AXD_DEVICE_VERSION
 0

	)

65 
	#AXD_FLAGS
 0

	)

67 
	#AXD_MAX_CLUSTERS
 3

	)

68 
	#AXD_CLUSTERID
 1

	)

69 
	#AXD_TEST_CLUSTERID
 2

	)

70 
	#AXD_TEST2_CLUSTERID
 3

	)

72 
	#AXD_CMD_ID
 1

	)

73 
	#AXD_TEST_CMD_ID
 2

	)

74 
	#AXD_TEST2_CMD_ID
 3

	)

77 
	#AXD_SEND_MSG_TIMEOUT
 5000

78 

	)

80 
	#AXD_SEND_MSG_EVT
 0x0001

	)

86 
uöt16
 
ã°2
;

95 
AXD_Inô
–
byã
 
èsk_id
 );

100 
UINT16
 
AXD_Pro˚ssEvít
–
byã
 
èsk_id
, UINT16 
evíts
 );

102 
AXD_Re˚iveD©aIndiˇti⁄
–
uöt16
 
sour˚
, uöt16 
comm™d
, uöt16 
Àn
, 
uöt8
 *
pD©a
 );

103 
zb_Re˚iveD©aIndiˇti⁄
–
uöt16
 
sour˚
, uöt16 
comm™d
, uöt16 
Àn
, 
uöt8
 *
pD©a
 );

104 
RódAdcVÆue
–
uöt8
 
Êag
 );

105 
uöt8
 
myAµ_RódTem≥øtuª
( );

110 #ifde‡
__˝lu•lus


	@OSAL_AXD.c

45 
	~"ZComDef.h
"

46 
	~"hÆ_drivîs.h
"

47 
	~"OSAL.h
"

48 
	~"OSAL_Tasks.h
"

49 
	~"OSAL_Cu°om.h
"

51 #i‡
deföed
 ( 
MT_TASK
 )

52 
	~"MTEL.h
"

55 
	~"nwk.h
"

56 
	~"APS.h
"

57 
	~"ZDAµ.h
"

59 
	~"AXD.h
"

66 c⁄° 
pTaskEvítH™dÀrFn
 
	gèsksAº
[] = {

67 
macEvítLo›
,

68 
nwk_evít_lo›
,

69 
HÆ_Pro˚ssEvít
,

70 #i‡
deföed
–
MT_TASK
 )

71 
MT_Pro˚ssEvít
,

73 
APS_evít_lo›
,

74 
ZDAµ_evít_lo›
,

75 
AXD_Pro˚ssEvít


78 c⁄° 
uöt8
 
	gèsksC¡
 = –
èsksAº
 ) / (ÅasksArr[0] );

79 
uöt16
 *
	gèsksEvíts
;

94 
	$oßlInôTasks
( )

96 
uöt8
 
èskID
 = 0;

98 
èsksEvíts
 = (
uöt16
 *)
	`oßl_mem_Æloc
––uöt16 ) * 
èsksC¡
);

99 
	`oßl_mem£t
–
èsksEvíts
, 0, (–
uöt16
 ) * 
èsksC¡
));

101 
	`macTaskInô
–
èskID
++ );

102 
	`nwk_öô
–
èskID
++ );

103 
	`HÆ_Inô
–
èskID
++ );

104 #i‡
	`deföed
–
MT_TASK
 )

105 
	`MT_TaskInô
–
èskID
++ );

107 
	`APS_Inô
–
èskID
++ );

108 
	`ZDAµ_Inô
–
èskID
++ );

109 
	`AXD_Inô
–
èskID
 );

110 
	}
}

	@ReadAXD.c

1 
	~"ZComDef.h
"

2 
	~"OSAL.h
"

4 
	~"hÆ_key.h
"

5 
	~"hÆ_Àd.h
"

6 
	~"hÆ_lcd.h
"

7 
	~"hÆ_adc.h
"

8 
	~"hÆ_mcu.h
"

11 
	~"ªadaxd.h
"

12 
	~"adxl345.h
"

13 
	~"AXD.h
"

20 
	#APP_INIT
 0

21 
	#APP_START
 1

22 
	#APP_BOUND
 2

23 

	)

26 
	#MY_START_EVT
 0x0001

	)

27 
	#MY_REPORT_TEMP_EVT
 0x0002

	)

28 
	#MY_REPORT_BATT_EVT
 0x0004

	)

29 
	#MY_FIND_COLLECTOR_EVT
 0x0008

	)

30 
	$zb_H™dÀOßlEvít
–
uöt16
 
evít
 )

33 
	}
}

	@readaxd.h

1 #i‚de‡
READAXD_H


2 
	#READAXD_H


	)

3 
zb_H™dÀOßlEvít
–
uöt16
 
evít
 );

	@
1
.
1
/usr/include
5
43
AXD.c
AXD.h
OSAL_AXD.c
ReadAXD.c
readaxd.h
